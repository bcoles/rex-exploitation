require 'spec_helper'
require 'rex/exploitation/egghunter'

RSpec.describe Rex::Exploitation::Egghunter do

  describe '#new' do
    it 'returns an Egghunter object' do
      expect(described_class.new("x86")).to be_a(Rex::Exploitation::Egghunter)
    end
  end

  describe '#generate' do
    it 'returns an array containing Windows X86 egg hunter' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'returns an array containing Windows X86 egg hunter with no bad characters' do
      payload = 'hello'
      badchars = "\x00\x0a\x0d"
      eggtag = 'w00t'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)

      badchars.each_char do |c|
        expect(egg).to_not include(c)
      end
    end

    it 'returns an array containing Windows X86 egg hunter starting search from eax register' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        startreg: 'eax',
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'returns an array containing Windows X86 egg hunter with checksum' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        checksum: true,
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'returns an array containing Windows X86 egg hunter using virtualalloc :depmethod' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        depmethod: 'virtualalloc',
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'returns an array containing Windows X86 egg hunter using virtualprotect :depmethod' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        depmethod: 'virtualprotect',
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'returns an array containing Windows X86 egg hunter using copy :depmethod' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        depmethod: 'copy',
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'returns an array containing Windows X86 egg hunter using copy_size :depmethod' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        depmethod: 'copy_size',
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'returns an array containing Linux X86 egg hunter' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('linux', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'returns an array containing Linux X86 egg hunter starting search from eax register' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('linux', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        startreg: 'eax',
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'returns an array containing Linux X86 egg hunter with no bad characters' do
      payload = 'hello'
      badchars = "\x00\x0a\x0d"
      eggtag = 'w00t'
      result = described_class.new('linux', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)

      badchars.each_char do |c|
        expect(egg).to_not include(c)
      end
    end

    it 'returns an array containing Linux X86 egg hunter with checksum' do
      payload = 'hello'
      badchars = ''
      eggtag = 'w00t'
      result = described_class.new('linux', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        checksum: true,
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      egghunter = result[0]
      expect(egghunter).to include(eggtag)

      egg = result[1]
      expect(egg).to include(eggtag + payload)
    end

    it 'raises when calculating checksum for payload exceeding 0x10000 bytes in length' do
      payload = 'A' * 0x10000
      badchars = ''
      expect {
        described_class.new('win', Rex::Arch::ARCH_X86).generate(
          payload,
          badchars,
          checksum: true,
        )
      }.to raise_error(RuntimeError)
    end
  end

end
