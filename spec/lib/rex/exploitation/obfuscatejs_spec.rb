require 'spec_helper'
require 'rex/exploitation/obfuscatejs'

RSpec.describe Rex::Exploitation::ObfuscateJS do
  INPUT_JS = %Q|
    // single line comment
    var test_variable = 123;
    test_variable = 456;

    /*
     * multi-line comment
     */
    function test_function() {
      alert("Hello, world!\\r\\n");
    };

    test_function();

    console.log('debugging output');

    var my_namespace = {
      my_value: 1,
      my_function: function() {
        console.log("hello from my_namespace.my_function()");
      }
    }

    my_namespace.my_function();
  |

  subject(:obfuscatejs) do
    described_class.new(INPUT_JS)
  end

  describe '#obfuscate' do
    it 'returns a #to_s object' do
      expect(obfuscatejs.obfuscate.to_s).to be_a(String)
    end

    it 'returns a non-empty String' do
      expect(obfuscatejs.obfuscate.to_s).not_to be_empty
    end

    it 'returns JavaScript without comments' do
      result = obfuscatejs.obfuscate
      expect(result).not_to be_empty
      expect(result).not_to include('// single line comment')
      expect(result).not_to include('* multi-line comment')
    end

    it 'returns JavaScript with randomized variable names' do
      opts = {
        'Symbols' => {
          'Variables' => ['test'],
        },
      }
      result = described_class.new(
        INPUT_JS,
        opts
      ).obfuscate
      expect(result).not_to be_empty
      expect(result).not_to include('test_variable')
    end

    it 'returns JavaScript with randomized function names' do
      opts = {
        'Symbols' => {
          'Methods' => ['test_function'],
        },
      }
      result = described_class.new(
        INPUT_JS,
        opts
      ).obfuscate
      expect(result).not_to be_empty
      expect(result).not_to include('test_function()')
      expect(result).to include('my_function()')
    end

    it 'returns JavaScript with randomized strings' do
      # test multiple times.
      # obfuscate_strings() takes code branches based on rand()
      10.times do
        opts = {
          'Strings' => true
        }
        result = described_class.new(
          INPUT_JS,
          opts
        ).obfuscate
        expect(result).not_to be_empty
        expect(result).not_to include('Hello, world')
      end
    end
  end

end
