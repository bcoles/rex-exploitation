require 'spec_helper'
require 'rex/exploitation/omelet'

RSpec.describe Rex::Exploitation::Omelet do

  describe '#new' do
    it 'returns an Omelet object' do
      expect(described_class.new("x86")).to be_a(Rex::Exploitation::Omelet)
    end
  end

  describe '#generate' do
    it 'returns an array containing Windows X86 omelet hunter' do
      payload = 'hello'
      badchars = ''
      eggtag = '00w'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      omelete = result[0]
      expect(omelete).to include(eggtag)

      eggs = result[1]
      expect(eggs).to be_kind_of(Array)
      expect(eggs.size).to be 1
      expect(eggs.first).to include(eggtag + payload)
    end

    it 'returns an array containing Windows X86 omelet hunter with no bad characters' do
      payload = 'hello'
      badchars = "\x00\x0a\x0d"
      eggtag = '00w'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      omelete = result[0]
      expect(omelete).to include(eggtag)

      eggs = result[1]
      expect(eggs).to be_kind_of(Array)
      expect(eggs.size).to be 1
      expect(eggs.first).to include(eggtag + payload)
      for egg in eggs
        badchars.each_char do |c|
          expect(egg).to_not include(c)
        end
      end
    end

    it 'returns an array containing Windows X86 omelet hunter starting search from eax register' do
      payload = 'hello'
      badchars = ''
      eggtag = '00w'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        startreg: 'eax',
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      omelete = result[0]
      expect(omelete).to include(eggtag)

      eggs = result[1]
      expect(eggs).to be_kind_of(Array)
      expect(eggs.size).to be 1
      expect(eggs.first).to include(eggtag + payload)
    end

    it 'returns an array containing Windows X86 omelet hunter with checksum' do
      payload = 'hello'
      badchars = ''
      eggtag = '00w'
      result = described_class.new('win', Rex::Arch::ARCH_X86).generate(
        payload,
        badchars,
        eggtag: eggtag,
        checksum: true,
      )
      expect(result).to be_kind_of(Array)
      expect(result.size).to be 2

      omelete = result[0]
      expect(omelete).to include(eggtag)

      eggs = result[1]
      expect(eggs).to be_kind_of(Array)
      expect(eggs.size).to be 1
      expect(eggs.first).to include(eggtag + payload)
    end
  end

end
